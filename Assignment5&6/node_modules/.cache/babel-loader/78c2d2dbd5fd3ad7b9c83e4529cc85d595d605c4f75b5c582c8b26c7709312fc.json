{"ast":null,"code":"var _jsxFileName = \"/Users/mayankdevtron/Documents/Assignment5&6new/src/context/UserContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getUsersFromStorage, updateUsersToStorage } from \"../service/localStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet user = {\n  username: \"\",\n  mobile: \"\",\n  email: \"\",\n  address: \"\",\n  dob: \"\",\n  gender: \"male\",\n  password: \"\",\n  cpassword: \"\"\n};\nlet UserContext = /*#__PURE__*/createContext({\n  users: [],\n  user: user,\n  err: '',\n  success: ''\n});\nexport const UserContextProvider = props => {\n  _s();\n  let navigate = useNavigate();\n  let {\n    children\n  } = props;\n  let [users, setUsers] = useState(getUsersFromStorage());\n  useEffect(() => {\n    updateUsersToStorage(users);\n  }, [users]);\n  let [newUser, setNewUser] = useState({\n    ...user\n  });\n  let [err, setErr] = useState('');\n  let [succes, setSuccess] = useState('');\n  let addUser = event => {\n    event.preventDefault();\n    if (newUser.password != newUser.cpassword) {\n      setSuccess('');\n      setErr(\"Password mismatched! please try again.\");\n      return;\n    }\n    let index = users.find(u => {\n      return u.mobile == user.mobile || u.email == newUser.email;\n    });\n    if (index != undefined) {\n      setErr('User with this email or mobile already exist.');\n      return;\n    }\n    setUsers([...users, newUser]);\n    setSuccess(\"User Added successfully\");\n    setNewUser({\n      ...user\n    });\n  };\n  let updateUser = event => {\n    event.preventDefault();\n    let index = users.findIndex(u => u.mobile == newUser.mobile);\n    console.log(index);\n    users.splice(index, 1, {\n      ...newUser\n    });\n    setUsers([...users]);\n    setNewUser({\n      ...user\n    });\n    navigate('/');\n  };\n  let inputOnChange = event => {\n    setErr('');\n    setSuccess('');\n    let {\n      name,\n      value\n    } = event.target;\n    setNewUser({\n      ...newUser,\n      [name]: value\n    });\n  };\n  let setEditData = id => {\n    let result = users.find(user => id === user.mobile);\n    if (result === undefined) {\n      //   navigate(\"/\");\n      window.location.replace(\"/\");\n    } else {\n      setNewUser({\n        ...result\n      });\n    }\n  };\n  let value = {\n    users,\n    addUser,\n    inputOnChange,\n    user: newUser,\n    err: err,\n    success: succes,\n    setEditData,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n_s(UserContextProvider, \"1uy8vypFZWBOZaTY3jETCXVIESU=\", false, function () {\n  return [useNavigate];\n});\n_c = UserContextProvider;\nexport const useUserContext = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUserContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useNavigate","getUsersFromStorage","updateUsersToStorage","user","username","mobile","email","address","dob","gender","password","cpassword","UserContext","users","err","success","UserContextProvider","props","navigate","children","setUsers","newUser","setNewUser","setErr","succes","setSuccess","addUser","event","preventDefault","index","find","u","undefined","updateUser","findIndex","console","log","splice","inputOnChange","name","value","target","setEditData","id","result","window","location","replace","useUserContext"],"sources":["/Users/mayankdevtron/Documents/Assignment5&6new/src/context/UserContext.tsx"],"sourcesContent":["import { ChangeEvent, createContext, FormEvent, useContext, useEffect, useState } from \"react\"\nimport { useNavigate } from \"react-router-dom\";\nimport { getUsersFromStorage, updateUsersToStorage, User } from \"../service/localStorage\";\n\n\nlet user:User={\n    username:\"\",\n    mobile:\"\",\n    email:\"\",\n    address:\"\",\n    dob:\"\",\n    gender:\"male\",\n    password:\"\",\n    cpassword:\"\"\n}\ntype userType = {\n    users:User[],\n    addUser?(event:FormEvent) :void;\n    inputOnChange?(\n        event: ChangeEvent<\n          HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n        >\n    ): void;\n    updateUser?(event:FormEvent):void;\n    setEditData?(mobile:string|number):void;\n    user:User;\n    err:string,\n    success:string\n}\n\n\nlet UserContext = createContext<userType>({\n   users:[],\n   user:user,\n   err:'',\n   success:''\n});\n\ntype props = {\n    children:JSX.Element;\n}\n\nexport const UserContextProvider = (props:props) => {\n    let navigate = useNavigate();\n    let {children} = props;\n    let [users,setUsers] = useState<User[]>(\n        getUsersFromStorage()\n    );\n    useEffect(()=>{\n        updateUsersToStorage(users);\n    },[users])\n    let [newUser,setNewUser] = useState<User>({...user});\n    let [err,setErr] = useState('');\n    let [succes,setSuccess] = useState('');\n    let addUser = (event:FormEvent): void => {\n        event.preventDefault();\n        if(newUser.password!=newUser.cpassword){\n          setSuccess('');\n           setErr(\"Password mismatched! please try again.\")\n           return;\n        }\n        let index = users.find(u=>{\n          return (u.mobile==user.mobile||u.email==newUser.email);\n        });\n        if(index!=undefined){\n          setErr('User with this email or mobile already exist.');\n          return;\n        }\n        setUsers([...users,newUser]);\n        setSuccess(\"User Added successfully\");\n        setNewUser({...user})\n\n    }\n    let updateUser = (event:FormEvent): void=>{\n        event.preventDefault();\n        let index = users.findIndex(u=>u.mobile==newUser.mobile);\n        console.log(index);\n        users.splice(index,1,{...newUser});\n        setUsers([...users]);\n        setNewUser({...user})\n\n        navigate('/');\n        \n    }\n    let inputOnChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setErr('');\n        setSuccess('');\n        let { name, value } = event.target;\n        setNewUser({ ...newUser, [name]: value });\n    };\n    let setEditData = (id: string|number): void => {\n        let result = users.find((user) => id === user.mobile);\n        if (result === undefined) {\n          //   navigate(\"/\");\n          window.location.replace(\"/\");\n        } else {\n          setNewUser({ ...result });\n        }\n    };\n    let value: userType = {\n        users,\n        addUser,\n        inputOnChange,\n        user:newUser,\n        err:err,\n        success:succes,\n        setEditData,\n        updateUser\n    };\n    return(\n        <UserContext.Provider value={value} >{children}</UserContext.Provider>\n    )\n}\n\nexport const useUserContext = () => {\n    return useContext(UserContext);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}